N个整数的序列{A1,A2,A3,...AN},求函数f(i,j)=max(0,sum(Ai,...Ak))的最大值

算法一：i是子列的左端位置，j是子列右端位置，subsum是Ai到Aj的子列和，如果刚得到的子列和更大，则更新结果，i循环结束，j循环结束，T(N)=O(N^3)

算法二：i是子列的左端位置，subsum是Ai到Aj的子列和，j是子列右端位置，对于相同的i不同的j只要在j-1次循环的基础上累加1项即可，
        如果刚得到的子列和更大，则更新结果，i循环结束，j循环结束，T(N)=O(N^2)

算法三：分而治之，分两边，一直分到N/2^k=1，比较三个序列：左边的最大sequence sum A（如何取得？要取边界），右边的最大sequence sum B，以及A+B

算法四：向右累加，发现更大的和则更新当前结果subsum，如果当前子列和为负则将当前结果subsum归零，抛弃之，T(N)=O(N)









