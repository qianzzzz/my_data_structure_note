What is data structure?


data structure algotithm 
数据结构---》算法

你手上有数据，你要考虑使用什么样结构存放这些数据---》首先考虑规模，规模决定难度--》考虑目的：两个操作，插入，查找

案例1：如何在书架上摆放图书？
方法一：顺序摆放，来一本放一本，但查起来会累死
方法二：按照书名的字母排序，同样查找起来会累死
方法三：分门别类，建立起体系，有规律插入，方便查找，既然是分类，就需要再进一步考虑每一类别的空间

Conlusion ： 解决问题方法的效率，跟数据的组织方式有关，直接相关


案列2：实现printN，传入N，打印1到N的全部正整数
方法一：循环
方法二：递归---简洁，占用空间的情况很严重，计算机会炸掉，

Conlusion ： 解决问题方法的效率，跟空间也有关


案列2：写程序计算给定多项式在给定点x处的值


什么是数据结构？
数据对象在计算机中的组织方式--------》逻辑结构，比如一对一，一对多（树），多对多（图）
                          --------》物理存储结构，数组？链表？
数据对象必定与一系列加在其上的操作相关联
完成这些操作所用的方法就是说算法



抽象数据类型（abstract data type）
解释两个词：数据类型，抽象
即：数据类型 -----》数据对象集
            ------》数据集合相关联的操作集
为什么放在一起说？比如图书的摆放，拿到一本书一定涉及如何摆放即操作
在c中式分开处理上述两点的，而在面向对象的语言中，如c++，java，有专门封装好的类来处理上述两点问题，
即为数据类型设置了机制，将一中数据对象的操作集封装在一个类里面

抽象：描述数据类型的方法不依赖于具体实现
1、与存放数据的机器无关
2、与数据存储的物理结构无关
3、与实现操作的算法和编程语言均无关
只描述数据对象集和相关操作集“是什么”，并不涉及“如何做到”的问题。    。。。。。。呃，真的很抽象，不具象

例子来了：
不管中间过程，比如get这个方法，只要实现了这个方法就可以，有点继承的感觉，继承抽象类，猫、狗、人都可以走路，只是具体走路用的方式不同，人用两条腿，
猫、狗用四只腿，但如果你写了猫类、狗类、人类都可以继承那个抽象类（有走、跑方法的类）
优点是啥:重用代码，好兼容，可能某个你写的模块之后有什么原因需要嫁接、应用到其他接口上，你可不希望重构你的代码，抽象、灵活，为未知的事务着想。
